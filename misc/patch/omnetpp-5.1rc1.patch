diff --git a/include/omnetpp/cobject.h b/include/omnetpp/cobject.h
index 2887819..19680b5 100644
--- a/include/omnetpp/cobject.h
+++ b/include/omnetpp/cobject.h
@@ -82,6 +82,8 @@ class SIM_API cObject
     // internal
     virtual void yieldOwnership(cOwnedObject *obj, cObject *to);
 
+    virtual void handleChange() {};
+
   public:
     /**
      * Constructor. It has an empty body. (The class does not have data members
diff --git a/src/nedxml/msgcppgenerator.cc b/src/nedxml/msgcppgenerator.cc
index 4b9b8e3..4057432 100644
--- a/src/nedxml/msgcppgenerator.cc
+++ b/src/nedxml/msgcppgenerator.cc
@@ -133,6 +133,7 @@ P check_and_cast(T *p)
 
 MsgCppGenerator::TypeDesc MsgCppGenerator::_PRIMITIVE_TYPES[] =
 { //     nedTypeName        cppTypeName        fromstring            tostring               emptyValue
+        {"bit",             "bit",             "bit(string2long($))","long2string($.get())","bit(0)"},
         {"bool",            "bool",            "string2bool($)",     "bool2string($)",      "false"},
         {"float",           "float",           "string2double($)",   "double2string($)",    "0"},
         {"double",          "double",          "string2double($)",   "double2string($)",    "0"},
@@ -732,6 +733,7 @@ void MsgCppGenerator::prepareFieldForCodeGeneration(ClassInfo& info, ClassInfo::
     it->feditable = getPropertyAsBool(it->fprops, "editable", false);
     it->editNotDisabled = getPropertyAsBool(it->fprops, "editable", true);
     it->fopaque = getPropertyAsBool(it->fprops, "opaque", false);
+    it->overrideGetter = getPropertyAsBool(it->fprops, "overridegetter", false);
     it->tostring = getProperty(it->fprops, "tostring", "");
     it->fromstring = getProperty(it->fprops, "fromstring", "");
 
@@ -950,6 +952,8 @@ void MsgCppGenerator::prepareForCodeGeneration(ClassInfo& info)
         info.fieldnamesuffix = "_var";
     }
 
+    info.declareStrFunction = getPropertyAsBool(info.props, "str", false);
+
     std::string s = getProperty(info.props, "implements");
     if (!s.empty()) {
         info.implements = StringTokenizer(s.c_str(), ",").asVector();
@@ -1112,6 +1116,9 @@ void MsgCppGenerator::generateClass(const ClassInfo& info)
     else {
         H << "    virtual " << info.msgclass << " *dup() const override {return new " << info.msgclass << "(*this);}\n";
     }
+    if (info.declareStrFunction) {
+        H << "    virtual std::string str() const override;\n";
+    }
     H << "    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;\n";
     H << "    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;\n";
     H << "\n";
@@ -1120,28 +1127,29 @@ void MsgCppGenerator::generateClass(const ClassInfo& info)
         std::string pure;
         if (it->fisabstract)
             pure = " = 0";
+        std::string overrideGetter(it->overrideGetter ? " override" : "");
 
         bool isstruct = !it->fisprimitivetype;
         std::string constifprimitivetype = (!isstruct ? " const" : "");
         if (it->fisarray && !it->farraysize.empty()) {
             H << "    virtual " << it->fsizetype << " " << it->getsize << "() const" << pure << ";\n";
-            H << "    virtual " << it->rettype << " " << it->getter << "(" << it->fsizetype << " k)" << constifprimitivetype << "" << pure << ";\n";
+            H << "    virtual " << it->rettype << " " << it->getter << "(" << it->fsizetype << " k)" << constifprimitivetype << "" << pure << overrideGetter << ";\n";
             if (isstruct)
-                H << "    virtual const " << it->rettype << " " << it->getter << "(" << it->fsizetype << " k) const {return const_cast<" << info.msgclass << "*>(this)->" << it->getter << "(k);}\n";
+                H << "    virtual const " << it->rettype << " " << it->getter << "(" << it->fsizetype << " k) const " << overrideGetter << " {return const_cast<" << info.msgclass << "*>(this)->" << it->getter << "(k);}\n";
             H << "    virtual void " << it->setter << "(" << it->fsizetype << " k, " << it->argtype << " " << it->argname << ")" << pure << ";\n";
         }
         else if (it->fisarray && it->farraysize.empty()) {
             H << "    virtual void " << it->alloc << "(" << it->fsizetype << " size)" << pure << ";\n";
             H << "    virtual " << it->fsizetype << " " << it->getsize << "() const" << pure << ";\n";
-            H << "    virtual " << it->rettype << " " << it->getter << "(" << it->fsizetype << " k)" << constifprimitivetype << "" << pure << ";\n";
+            H << "    virtual " << it->rettype << " " << it->getter << "(" << it->fsizetype << " k)" << constifprimitivetype << "" << pure << overrideGetter << ";\n";
             if (isstruct)
-                H << "    virtual const " << it->rettype << " " << it->getter << "(" << it->fsizetype << " k) const {return const_cast<" << info.msgclass << "*>(this)->" << it->getter << "(k);}\n";
+                H << "    virtual const " << it->rettype << " " << it->getter << "(" << it->fsizetype << " k) const" << overrideGetter << " {return const_cast<" << info.msgclass << "*>(this)->" << it->getter << "(k);}\n";
             H << "    virtual void " << it->setter << "(" << it->fsizetype << " k, " << it->argtype << " " << it->argname << ")" << pure << ";\n";
         }
         else {
-            H << "    virtual " << it->rettype << " " << it->getter << "()" << constifprimitivetype << "" << pure << ";\n";
+            H << "    virtual " << it->rettype << " " << it->getter << "()" << constifprimitivetype << "" << pure << overrideGetter << ";\n";
             if (isstruct)
-                H << "    virtual const " << it->rettype << " " << it->getter << "() const {return const_cast<" << info.msgclass << "*>(this)->" << it->getter << "();}\n";
+                H << "    virtual const " << it->rettype << " " << it->getter << "() const" << overrideGetter << " {return const_cast<" << info.msgclass << "*>(this)->" << it->getter << "();}\n";
             H << "    virtual void " << it->setter << "(" << it->argtype << " " << it->argname << ")" << pure << ";\n";
         }
     }
@@ -1410,6 +1418,7 @@ void MsgCppGenerator::generateClass(const ClassInfo& info)
                 CC << "}\n\n";
                 CC << "void " << info.msgclass << "::" << it->setter << "(" << it->fsizetype << " k, " << it->argtype << " " << it->argname << ")\n";
                 CC << "{\n";
+                CC << "    handleChange();\n";
                 CC << "    if (k>=" << it->farraysize << ") throw omnetpp::cRuntimeError(\"Array of size " << it->farraysize << " indexed by %lu\", (unsigned long)k);\n";
                 CC << "    this->" << it->var << "[k] = " << it->argname << ";\n";
                 CC << "}\n\n";
@@ -1417,6 +1426,7 @@ void MsgCppGenerator::generateClass(const ClassInfo& info)
             else if (it->fisarray && it->farraysize.empty()) {
                 CC << "void " << info.msgclass << "::" << it->alloc << "(" << it->fsizetype << " size)\n";
                 CC << "{\n";
+                CC << "    handleChange();\n";
                 CC << "    " << it->datatype << " *" << it->var << "2 = (size==0) ? nullptr : new " << it->datatype << "[size];\n";
                 CC << "    " << it->fsizetype << " sz = " << it->varsize << " < size ? " << it->varsize << " : size;\n";
                 CC << "    for (" << it->fsizetype << " i=0; i<sz; i++)\n";
@@ -1444,6 +1454,7 @@ void MsgCppGenerator::generateClass(const ClassInfo& info)
                 CC << "}\n\n";
                 CC << "void " << info.msgclass << "::" << it->setter << "(" << it->fsizetype << " k, " << it->argtype << " " << it->argname << ")\n";
                 CC << "{\n";
+                CC << "    handleChange();\n";
                 CC << "    if (k>=" << it->varsize << ") throw omnetpp::cRuntimeError(\"Array of size %d indexed by %d\", " << it->varsize << ", k);\n";
                 CC << "    this->" << it->var << "[k] = " << it->argname << ";\n";
                 CC << "}\n\n";
@@ -1455,6 +1466,7 @@ void MsgCppGenerator::generateClass(const ClassInfo& info)
                 CC << "}\n\n";
                 CC << "void " << info.msgclass << "::" << it->setter << "(" << it->argtype << " " << it->argname << ")\n";
                 CC << "{\n";
+                CC << "    handleChange();\n";
                 CC << "    this->" << it->var << " = " << it->argname << ";\n";
                 CC << "}\n\n";
             }
diff --git a/src/nedxml/msgcppgenerator.h b/src/nedxml/msgcppgenerator.h
index bc28691..e025c7d 100644
--- a/src/nedxml/msgcppgenerator.h
+++ b/src/nedxml/msgcppgenerator.h
@@ -151,6 +151,7 @@ class NEDXML_API MsgCppGenerator
             bool feditable;         // @editable(true)
             bool editNotDisabled;   // true when field doesn't have property "@editable(false)"
             bool fopaque;         // @opaque(true)        // TODO: @opaque should rather be the attribute of the field's type, not the field itself
+            bool overrideGetter;   // @overridegetter, uses when field getter function overrides a function in base class
 
           public:
             FieldInfo() : nedElement(nullptr), fisabstract(false), fispointer(false), fisarray(false), classtype(UNKNOWN), fnopack(false), feditable(false),fopaque(false) {}
@@ -165,6 +166,7 @@ class NEDXML_API MsgCppGenerator
 
         bool gap;                   // true if @customize
         bool omitgetverb;
+        bool declareStrFunction;
         ClassType classtype;
         std::string msgclass;
         std::string realmsgclass;
